# Generated from yapl.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,259,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
        10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,
        15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,
        20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
        23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,
        26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
        28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,5,30,198,8,30,10,
        30,12,30,201,9,30,1,31,1,31,5,31,205,8,31,10,31,12,31,208,9,31,1,
        32,4,32,211,8,32,11,32,12,32,212,1,33,1,33,1,33,5,33,218,8,33,10,
        33,12,33,221,9,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,5,
        35,232,8,35,10,35,12,35,235,9,35,1,35,1,35,1,35,1,35,1,35,5,35,242,
        8,35,10,35,12,35,245,9,35,1,35,1,35,3,35,249,8,35,1,35,1,35,1,36,
        4,36,254,8,36,11,36,12,36,255,1,36,1,36,2,233,243,0,37,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,0,71,35,73,36,
        1,0,7,1,0,97,122,4,0,48,57,65,90,95,95,97,122,1,0,65,90,1,0,48,57,
        4,0,9,10,13,13,34,34,92,92,6,0,92,92,98,98,102,102,110,110,114,114,
        116,116,3,0,9,10,13,13,32,32,266,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,77,1,0,0,
        0,5,79,1,0,0,0,7,81,1,0,0,0,9,83,1,0,0,0,11,85,1,0,0,0,13,87,1,0,
        0,0,15,89,1,0,0,0,17,91,1,0,0,0,19,93,1,0,0,0,21,95,1,0,0,0,23,97,
        1,0,0,0,25,100,1,0,0,0,27,102,1,0,0,0,29,107,1,0,0,0,31,109,1,0,
        0,0,33,115,1,0,0,0,35,121,1,0,0,0,37,130,1,0,0,0,39,135,1,0,0,0,
        41,145,1,0,0,0,43,150,1,0,0,0,45,153,1,0,0,0,47,156,1,0,0,0,49,162,
        1,0,0,0,51,166,1,0,0,0,53,173,1,0,0,0,55,177,1,0,0,0,57,184,1,0,
        0,0,59,188,1,0,0,0,61,195,1,0,0,0,63,202,1,0,0,0,65,210,1,0,0,0,
        67,214,1,0,0,0,69,224,1,0,0,0,71,248,1,0,0,0,73,253,1,0,0,0,75,76,
        5,123,0,0,76,2,1,0,0,0,77,78,5,125,0,0,78,4,1,0,0,0,79,80,5,40,0,
        0,80,6,1,0,0,0,81,82,5,41,0,0,82,8,1,0,0,0,83,84,5,59,0,0,84,10,
        1,0,0,0,85,86,5,44,0,0,86,12,1,0,0,0,87,88,5,61,0,0,88,14,1,0,0,
        0,89,90,5,43,0,0,90,16,1,0,0,0,91,92,5,45,0,0,92,18,1,0,0,0,93,94,
        5,42,0,0,94,20,1,0,0,0,95,96,5,47,0,0,96,22,1,0,0,0,97,98,5,61,0,
        0,98,99,5,61,0,0,99,24,1,0,0,0,100,101,5,60,0,0,101,26,1,0,0,0,102,
        103,5,116,0,0,103,104,5,114,0,0,104,105,5,117,0,0,105,106,5,101,
        0,0,106,28,1,0,0,0,107,108,5,46,0,0,108,30,1,0,0,0,109,110,5,102,
        0,0,110,111,5,97,0,0,111,112,5,108,0,0,112,113,5,115,0,0,113,114,
        5,101,0,0,114,32,1,0,0,0,115,116,5,99,0,0,116,117,5,108,0,0,117,
        118,5,97,0,0,118,119,5,115,0,0,119,120,5,115,0,0,120,34,1,0,0,0,
        121,122,5,105,0,0,122,123,5,110,0,0,123,124,5,104,0,0,124,125,5,
        101,0,0,125,126,5,114,0,0,126,127,5,105,0,0,127,128,5,116,0,0,128,
        129,5,115,0,0,129,36,1,0,0,0,130,131,5,115,0,0,131,132,5,101,0,0,
        132,133,5,108,0,0,133,134,5,102,0,0,134,38,1,0,0,0,135,136,5,83,
        0,0,136,137,5,69,0,0,137,138,5,76,0,0,138,139,5,70,0,0,139,140,5,
        95,0,0,140,141,5,84,0,0,141,142,5,89,0,0,142,143,5,80,0,0,143,144,
        5,69,0,0,144,40,1,0,0,0,145,146,5,101,0,0,146,147,5,108,0,0,147,
        148,5,115,0,0,148,149,5,101,0,0,149,42,1,0,0,0,150,151,5,102,0,0,
        151,152,5,105,0,0,152,44,1,0,0,0,153,154,5,105,0,0,154,155,5,102,
        0,0,155,46,1,0,0,0,156,157,5,119,0,0,157,158,5,104,0,0,158,159,5,
        105,0,0,159,160,5,108,0,0,160,161,5,101,0,0,161,48,1,0,0,0,162,163,
        5,110,0,0,163,164,5,101,0,0,164,165,5,119,0,0,165,50,1,0,0,0,166,
        167,5,105,0,0,167,168,5,115,0,0,168,169,5,118,0,0,169,170,5,111,
        0,0,170,171,5,105,0,0,171,172,5,100,0,0,172,52,1,0,0,0,173,174,5,
        110,0,0,174,175,5,111,0,0,175,176,5,116,0,0,176,54,1,0,0,0,177,178,
        5,114,0,0,178,179,5,101,0,0,179,180,5,116,0,0,180,181,5,117,0,0,
        181,182,5,114,0,0,182,183,5,110,0,0,183,56,1,0,0,0,184,185,5,105,
        0,0,185,186,5,110,0,0,186,187,5,116,0,0,187,58,1,0,0,0,188,189,5,
        115,0,0,189,190,5,116,0,0,190,191,5,114,0,0,191,192,5,105,0,0,192,
        193,5,110,0,0,193,194,5,103,0,0,194,60,1,0,0,0,195,199,7,0,0,0,196,
        198,7,1,0,0,197,196,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,
        200,1,0,0,0,200,62,1,0,0,0,201,199,1,0,0,0,202,206,7,2,0,0,203,205,
        7,1,0,0,204,203,1,0,0,0,205,208,1,0,0,0,206,204,1,0,0,0,206,207,
        1,0,0,0,207,64,1,0,0,0,208,206,1,0,0,0,209,211,7,3,0,0,210,209,1,
        0,0,0,211,212,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,66,1,0,
        0,0,214,219,5,34,0,0,215,218,8,4,0,0,216,218,3,69,34,0,217,215,1,
        0,0,0,217,216,1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,
        0,0,0,220,222,1,0,0,0,221,219,1,0,0,0,222,223,5,34,0,0,223,68,1,
        0,0,0,224,225,5,92,0,0,225,226,7,5,0,0,226,70,1,0,0,0,227,228,5,
        45,0,0,228,229,5,45,0,0,229,233,1,0,0,0,230,232,9,0,0,0,231,230,
        1,0,0,0,232,235,1,0,0,0,233,234,1,0,0,0,233,231,1,0,0,0,234,236,
        1,0,0,0,235,233,1,0,0,0,236,249,5,10,0,0,237,238,5,40,0,0,238,239,
        5,42,0,0,239,243,1,0,0,0,240,242,9,0,0,0,241,240,1,0,0,0,242,245,
        1,0,0,0,243,244,1,0,0,0,243,241,1,0,0,0,244,246,1,0,0,0,245,243,
        1,0,0,0,246,247,5,42,0,0,247,249,5,41,0,0,248,227,1,0,0,0,248,237,
        1,0,0,0,249,250,1,0,0,0,250,251,6,35,0,0,251,72,1,0,0,0,252,254,
        7,6,0,0,253,252,1,0,0,0,254,255,1,0,0,0,255,253,1,0,0,0,255,256,
        1,0,0,0,256,257,1,0,0,0,257,258,6,36,0,0,258,74,1,0,0,0,10,0,199,
        206,212,217,219,233,243,248,255,1,6,0,0
    ]

class yaplLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LBRACE = 1
    RBRACE = 2
    LPAREN = 3
    RPAREN = 4
    SEMI = 5
    COMMA = 6
    EQUALS = 7
    PLUS = 8
    MINUS = 9
    MULT = 10
    DIV = 11
    EQ = 12
    LT = 13
    TRUE = 14
    DOT = 15
    FALSE = 16
    CLASS = 17
    INHERITS = 18
    SELF = 19
    SELF_TYPE = 20
    ELSE = 21
    FI = 22
    IF = 23
    WHILE = 24
    NEW = 25
    ISVOID = 26
    NOT = 27
    RETURN = 28
    INT = 29
    STRING_TYPE = 30
    ID = 31
    TYPE_ID = 32
    INTEGER = 33
    STRING = 34
    COMMENT = 35
    WS = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'('", "')'", "';'", "','", "'='", "'+'", "'-'", 
            "'*'", "'/'", "'=='", "'<'", "'true'", "'.'", "'false'", "'class'", 
            "'inherits'", "'self'", "'SELF_TYPE'", "'else'", "'fi'", "'if'", 
            "'while'", "'new'", "'isvoid'", "'not'", "'return'", "'int'", 
            "'string'" ]

    symbolicNames = [ "<INVALID>",
            "LBRACE", "RBRACE", "LPAREN", "RPAREN", "SEMI", "COMMA", "EQUALS", 
            "PLUS", "MINUS", "MULT", "DIV", "EQ", "LT", "TRUE", "DOT", "FALSE", 
            "CLASS", "INHERITS", "SELF", "SELF_TYPE", "ELSE", "FI", "IF", 
            "WHILE", "NEW", "ISVOID", "NOT", "RETURN", "INT", "STRING_TYPE", 
            "ID", "TYPE_ID", "INTEGER", "STRING", "COMMENT", "WS" ]

    ruleNames = [ "LBRACE", "RBRACE", "LPAREN", "RPAREN", "SEMI", "COMMA", 
                  "EQUALS", "PLUS", "MINUS", "MULT", "DIV", "EQ", "LT", 
                  "TRUE", "DOT", "FALSE", "CLASS", "INHERITS", "SELF", "SELF_TYPE", 
                  "ELSE", "FI", "IF", "WHILE", "NEW", "ISVOID", "NOT", "RETURN", 
                  "INT", "STRING_TYPE", "ID", "TYPE_ID", "INTEGER", "STRING", 
                  "EscapeSequence", "COMMENT", "WS" ]

    grammarFileName = "yapl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


