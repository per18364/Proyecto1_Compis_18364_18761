# Generated from yapl.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,43,295,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,1,0,1,0,1,1,1,1,
        1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,
        1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,
        1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,
        1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,
        1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,36,1,36,1,36,1,36,1,36,1,37,1,37,5,37,234,8,37,10,37,12,37,237,
        9,37,1,38,1,38,5,38,241,8,38,10,38,12,38,244,9,38,1,39,4,39,247,
        8,39,11,39,12,39,248,1,40,1,40,1,40,5,40,254,8,40,10,40,12,40,257,
        9,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,5,42,268,8,42,
        10,42,12,42,271,9,42,1,42,1,42,1,42,1,42,1,42,5,42,278,8,42,10,42,
        12,42,281,9,42,1,42,1,42,3,42,285,8,42,1,42,1,42,1,43,4,43,290,8,
        43,11,43,12,43,291,1,43,1,43,2,269,279,0,44,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
        39,79,40,81,41,83,0,85,42,87,43,1,0,7,1,0,97,122,4,0,48,57,65,90,
        95,95,97,122,1,0,65,90,1,0,48,57,4,0,9,10,13,13,34,34,92,92,6,0,
        92,92,98,98,102,102,110,110,114,114,116,116,3,0,9,10,13,13,32,32,
        302,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        0,81,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,1,89,1,0,0,0,3,91,1,0,0,0,
        5,93,1,0,0,0,7,95,1,0,0,0,9,97,1,0,0,0,11,99,1,0,0,0,13,101,1,0,
        0,0,15,103,1,0,0,0,17,105,1,0,0,0,19,107,1,0,0,0,21,109,1,0,0,0,
        23,111,1,0,0,0,25,114,1,0,0,0,27,117,1,0,0,0,29,119,1,0,0,0,31,121,
        1,0,0,0,33,124,1,0,0,0,35,127,1,0,0,0,37,130,1,0,0,0,39,133,1,0,
        0,0,41,138,1,0,0,0,43,140,1,0,0,0,45,146,1,0,0,0,47,152,1,0,0,0,
        49,161,1,0,0,0,51,166,1,0,0,0,53,176,1,0,0,0,55,181,1,0,0,0,57,184,
        1,0,0,0,59,187,1,0,0,0,61,193,1,0,0,0,63,197,1,0,0,0,65,204,1,0,
        0,0,67,208,1,0,0,0,69,215,1,0,0,0,71,219,1,0,0,0,73,226,1,0,0,0,
        75,231,1,0,0,0,77,238,1,0,0,0,79,246,1,0,0,0,81,250,1,0,0,0,83,260,
        1,0,0,0,85,284,1,0,0,0,87,289,1,0,0,0,89,90,5,123,0,0,90,2,1,0,0,
        0,91,92,5,125,0,0,92,4,1,0,0,0,93,94,5,40,0,0,94,6,1,0,0,0,95,96,
        5,41,0,0,96,8,1,0,0,0,97,98,5,59,0,0,98,10,1,0,0,0,99,100,5,44,0,
        0,100,12,1,0,0,0,101,102,5,61,0,0,102,14,1,0,0,0,103,104,5,43,0,
        0,104,16,1,0,0,0,105,106,5,45,0,0,106,18,1,0,0,0,107,108,5,42,0,
        0,108,20,1,0,0,0,109,110,5,47,0,0,110,22,1,0,0,0,111,112,5,61,0,
        0,112,113,5,61,0,0,113,24,1,0,0,0,114,115,5,33,0,0,115,116,5,61,
        0,0,116,26,1,0,0,0,117,118,5,60,0,0,118,28,1,0,0,0,119,120,5,62,
        0,0,120,30,1,0,0,0,121,122,5,62,0,0,122,123,5,61,0,0,123,32,1,0,
        0,0,124,125,5,60,0,0,125,126,5,61,0,0,126,34,1,0,0,0,127,128,5,38,
        0,0,128,129,5,38,0,0,129,36,1,0,0,0,130,131,5,124,0,0,131,132,5,
        124,0,0,132,38,1,0,0,0,133,134,5,116,0,0,134,135,5,114,0,0,135,136,
        5,117,0,0,136,137,5,101,0,0,137,40,1,0,0,0,138,139,5,46,0,0,139,
        42,1,0,0,0,140,141,5,102,0,0,141,142,5,97,0,0,142,143,5,108,0,0,
        143,144,5,115,0,0,144,145,5,101,0,0,145,44,1,0,0,0,146,147,5,99,
        0,0,147,148,5,108,0,0,148,149,5,97,0,0,149,150,5,115,0,0,150,151,
        5,115,0,0,151,46,1,0,0,0,152,153,5,105,0,0,153,154,5,110,0,0,154,
        155,5,104,0,0,155,156,5,101,0,0,156,157,5,114,0,0,157,158,5,105,
        0,0,158,159,5,116,0,0,159,160,5,115,0,0,160,48,1,0,0,0,161,162,5,
        115,0,0,162,163,5,101,0,0,163,164,5,108,0,0,164,165,5,102,0,0,165,
        50,1,0,0,0,166,167,5,83,0,0,167,168,5,69,0,0,168,169,5,76,0,0,169,
        170,5,70,0,0,170,171,5,95,0,0,171,172,5,84,0,0,172,173,5,89,0,0,
        173,174,5,80,0,0,174,175,5,69,0,0,175,52,1,0,0,0,176,177,5,101,0,
        0,177,178,5,108,0,0,178,179,5,115,0,0,179,180,5,101,0,0,180,54,1,
        0,0,0,181,182,5,102,0,0,182,183,5,105,0,0,183,56,1,0,0,0,184,185,
        5,105,0,0,185,186,5,102,0,0,186,58,1,0,0,0,187,188,5,119,0,0,188,
        189,5,104,0,0,189,190,5,105,0,0,190,191,5,108,0,0,191,192,5,101,
        0,0,192,60,1,0,0,0,193,194,5,110,0,0,194,195,5,101,0,0,195,196,5,
        119,0,0,196,62,1,0,0,0,197,198,5,105,0,0,198,199,5,115,0,0,199,200,
        5,118,0,0,200,201,5,111,0,0,201,202,5,105,0,0,202,203,5,100,0,0,
        203,64,1,0,0,0,204,205,5,110,0,0,205,206,5,111,0,0,206,207,5,116,
        0,0,207,66,1,0,0,0,208,209,5,114,0,0,209,210,5,101,0,0,210,211,5,
        116,0,0,211,212,5,117,0,0,212,213,5,114,0,0,213,214,5,110,0,0,214,
        68,1,0,0,0,215,216,5,105,0,0,216,217,5,110,0,0,217,218,5,116,0,0,
        218,70,1,0,0,0,219,220,5,115,0,0,220,221,5,116,0,0,221,222,5,114,
        0,0,222,223,5,105,0,0,223,224,5,110,0,0,224,225,5,103,0,0,225,72,
        1,0,0,0,226,227,5,98,0,0,227,228,5,111,0,0,228,229,5,111,0,0,229,
        230,5,108,0,0,230,74,1,0,0,0,231,235,7,0,0,0,232,234,7,1,0,0,233,
        232,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,
        76,1,0,0,0,237,235,1,0,0,0,238,242,7,2,0,0,239,241,7,1,0,0,240,239,
        1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,78,1,
        0,0,0,244,242,1,0,0,0,245,247,7,3,0,0,246,245,1,0,0,0,247,248,1,
        0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,80,1,0,0,0,250,255,5,34,
        0,0,251,254,8,4,0,0,252,254,3,83,41,0,253,251,1,0,0,0,253,252,1,
        0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,258,1,
        0,0,0,257,255,1,0,0,0,258,259,5,34,0,0,259,82,1,0,0,0,260,261,5,
        92,0,0,261,262,7,5,0,0,262,84,1,0,0,0,263,264,5,45,0,0,264,265,5,
        45,0,0,265,269,1,0,0,0,266,268,9,0,0,0,267,266,1,0,0,0,268,271,1,
        0,0,0,269,270,1,0,0,0,269,267,1,0,0,0,270,272,1,0,0,0,271,269,1,
        0,0,0,272,285,5,10,0,0,273,274,5,40,0,0,274,275,5,42,0,0,275,279,
        1,0,0,0,276,278,9,0,0,0,277,276,1,0,0,0,278,281,1,0,0,0,279,280,
        1,0,0,0,279,277,1,0,0,0,280,282,1,0,0,0,281,279,1,0,0,0,282,283,
        5,42,0,0,283,285,5,41,0,0,284,263,1,0,0,0,284,273,1,0,0,0,285,286,
        1,0,0,0,286,287,6,42,0,0,287,86,1,0,0,0,288,290,7,6,0,0,289,288,
        1,0,0,0,290,291,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,293,
        1,0,0,0,293,294,6,43,0,0,294,88,1,0,0,0,10,0,235,242,248,253,255,
        269,279,284,291,1,6,0,0
    ]

class yaplLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LBRACE = 1
    RBRACE = 2
    LPAREN = 3
    RPAREN = 4
    SEMI = 5
    COMMA = 6
    EQUALS = 7
    PLUS = 8
    MINUS = 9
    MULT = 10
    DIV = 11
    EQ = 12
    NEQ = 13
    LT = 14
    GT = 15
    GT_EQ = 16
    LT_EQ = 17
    AND = 18
    OR = 19
    TRUE = 20
    DOT = 21
    FALSE = 22
    CLASS = 23
    INHERITS = 24
    SELF = 25
    SELF_TYPE = 26
    ELSE = 27
    FI = 28
    IF = 29
    WHILE = 30
    NEW = 31
    ISVOID = 32
    NOT = 33
    RETURN = 34
    INT = 35
    STRING_TYPE = 36
    BOOL = 37
    ID = 38
    TYPE_ID = 39
    INTEGER = 40
    STRING = 41
    COMMENT = 42
    WS = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'('", "')'", "';'", "','", "'='", "'+'", "'-'", 
            "'*'", "'/'", "'=='", "'!='", "'<'", "'>'", "'>='", "'<='", 
            "'&&'", "'||'", "'true'", "'.'", "'false'", "'class'", "'inherits'", 
            "'self'", "'SELF_TYPE'", "'else'", "'fi'", "'if'", "'while'", 
            "'new'", "'isvoid'", "'not'", "'return'", "'int'", "'string'", 
            "'bool'" ]

    symbolicNames = [ "<INVALID>",
            "LBRACE", "RBRACE", "LPAREN", "RPAREN", "SEMI", "COMMA", "EQUALS", 
            "PLUS", "MINUS", "MULT", "DIV", "EQ", "NEQ", "LT", "GT", "GT_EQ", 
            "LT_EQ", "AND", "OR", "TRUE", "DOT", "FALSE", "CLASS", "INHERITS", 
            "SELF", "SELF_TYPE", "ELSE", "FI", "IF", "WHILE", "NEW", "ISVOID", 
            "NOT", "RETURN", "INT", "STRING_TYPE", "BOOL", "ID", "TYPE_ID", 
            "INTEGER", "STRING", "COMMENT", "WS" ]

    ruleNames = [ "LBRACE", "RBRACE", "LPAREN", "RPAREN", "SEMI", "COMMA", 
                  "EQUALS", "PLUS", "MINUS", "MULT", "DIV", "EQ", "NEQ", 
                  "LT", "GT", "GT_EQ", "LT_EQ", "AND", "OR", "TRUE", "DOT", 
                  "FALSE", "CLASS", "INHERITS", "SELF", "SELF_TYPE", "ELSE", 
                  "FI", "IF", "WHILE", "NEW", "ISVOID", "NOT", "RETURN", 
                  "INT", "STRING_TYPE", "BOOL", "ID", "TYPE_ID", "INTEGER", 
                  "STRING", "EscapeSequence", "COMMENT", "WS" ]

    grammarFileName = "yapl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


